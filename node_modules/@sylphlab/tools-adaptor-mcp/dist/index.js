"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var index_exports = {};
__export(index_exports, {
  registerTools: () => registerTools,
  startMcpServer: () => startMcpServer
});
module.exports = __toCommonJS(index_exports);
var import_stdio = require("@modelcontextprotocol/sdk/server/stdio.js");
var import_tools_core = require("@sylphlab/tools-core");
function mapToMcpContent(parts) {
  return (0, import_tools_core.mapWhen)(parts, {
    text: (part) => ({ type: "text", text: part.value }),
    // Use 'text' property
    json: (part) => ({ type: "text", text: JSON.stringify(part.value, null, 2) }),
    // Stringify JSON for MCP text
    image: (part) => ({ type: "image", data: part.data, mimeType: part.mimeType }),
    // Pass mimeType
    audio: (part) => ({ type: "audio", data: part.data, mimeType: part.mimeType }),
    // Pass mimeType
    fileRef: (part) => ({ type: "text", text: `File reference: ${part.path}` })
    // Represent fileRef as text
  });
}
function registerTools(server, tools, toolOptions) {
  for (const tool of tools) {
    const { name, description, inputSchema, execute } = tool;
    const isObjectSchema = "shape" in inputSchema;
    const schemaDefinition = isObjectSchema ? inputSchema.shape : { value: inputSchema };
    const toolCallback = async (mcpArgs) => {
      try {
        const executionArgs = isObjectSchema ? mcpArgs : mcpArgs.value;
        const executionContext = toolOptions;
        const resultParts = await execute({ context: executionContext, args: executionArgs });
        const mcpContent = mapToMcpContent(resultParts);
        return { content: mcpContent, isError: false };
      } catch (error) {
        console.error(`Error executing tool ${name}:`, error);
        const errorMessage = error instanceof Error ? error.message : String(error);
        return { content: [{ type: "text", text: `Error: ${errorMessage}` }], isError: true };
      }
    };
    server.tool(name, description, schemaDefinition, toolCallback);
  }
}
async function startMcpServer(serverOptions, toolOptions) {
  const { McpServer: McpServerConstructor } = await import("@modelcontextprotocol/sdk/server/mcp.js");
  const server = new McpServerConstructor({
    name: serverOptions.name,
    version: serverOptions.version,
    description: serverOptions.description
  });
  registerTools(server, serverOptions.tools, toolOptions);
  const transport = new import_stdio.StdioServerTransport();
  await server.connect(transport);
  console.error(`[${serverOptions.name}] MCP server started on stdio.`);
  const shutdown = async (signal) => {
    console.error(`[${serverOptions.name}] Received ${signal}. Shutting down...`);
    process.exit(0);
  };
  process.on("SIGINT", () => shutdown("SIGINT"));
  process.on("SIGTERM", () => shutdown("SIGTERM"));
  return server;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  registerTools,
  startMcpServer
});
//# sourceMappingURL=index.js.map