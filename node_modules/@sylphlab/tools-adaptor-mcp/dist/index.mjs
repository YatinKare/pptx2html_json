// src/index.ts
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import {
  mapWhen
} from "@sylphlab/tools-core";
function mapToMcpContent(parts) {
  return mapWhen(parts, {
    text: (part) => ({ type: "text", text: part.value }),
    // Use 'text' property
    json: (part) => ({ type: "text", text: JSON.stringify(part.value, null, 2) }),
    // Stringify JSON for MCP text
    image: (part) => ({ type: "image", data: part.data, mimeType: part.mimeType }),
    // Pass mimeType
    audio: (part) => ({ type: "audio", data: part.data, mimeType: part.mimeType }),
    // Pass mimeType
    fileRef: (part) => ({ type: "text", text: `File reference: ${part.path}` })
    // Represent fileRef as text
  });
}
function registerTools(server, tools, toolOptions) {
  for (const tool of tools) {
    const { name, description, inputSchema, execute } = tool;
    const isObjectSchema = "shape" in inputSchema;
    const schemaDefinition = isObjectSchema ? inputSchema.shape : { value: inputSchema };
    const toolCallback = async (mcpArgs) => {
      try {
        const executionArgs = isObjectSchema ? mcpArgs : mcpArgs.value;
        const executionContext = toolOptions;
        const resultParts = await execute({ context: executionContext, args: executionArgs });
        const mcpContent = mapToMcpContent(resultParts);
        return { content: mcpContent, isError: false };
      } catch (error) {
        console.error(`Error executing tool ${name}:`, error);
        const errorMessage = error instanceof Error ? error.message : String(error);
        return { content: [{ type: "text", text: `Error: ${errorMessage}` }], isError: true };
      }
    };
    server.tool(name, description, schemaDefinition, toolCallback);
  }
}
async function startMcpServer(serverOptions, toolOptions) {
  const { McpServer: McpServerConstructor } = await import("@modelcontextprotocol/sdk/server/mcp.js");
  const server = new McpServerConstructor({
    name: serverOptions.name,
    version: serverOptions.version,
    description: serverOptions.description
  });
  registerTools(server, serverOptions.tools, toolOptions);
  const transport = new StdioServerTransport();
  await server.connect(transport);
  console.error(`[${serverOptions.name}] MCP server started on stdio.`);
  const shutdown = async (signal) => {
    console.error(`[${serverOptions.name}] Received ${signal}. Shutting down...`);
    process.exit(0);
  };
  process.on("SIGINT", () => shutdown("SIGINT"));
  process.on("SIGTERM", () => shutdown("SIGTERM"));
  return server;
}
export {
  registerTools,
  startMcpServer
};
//# sourceMappingURL=index.mjs.map