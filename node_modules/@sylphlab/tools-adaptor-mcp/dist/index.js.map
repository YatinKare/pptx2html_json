{"version":3,"sources":["../src/index.ts"],"sourcesContent":["// Remove unused imports: RequestHandlerExtra, ServerRequest, ServerNotification\nimport type { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';\nimport { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';\nimport { z, type ZodObject, type ZodRawShape, type ZodTypeAny } from 'zod';\nimport {\n  type ToolDefinition,\n  type ToolExecuteOptions,\n  type Part,\n  mapWhen,\n  BaseContextSchema,\n} from '@sylphlab/tools-core';\n\n// Define a more specific type for the tools array in McpServerOptions\nexport type McpToolDefinition = ToolDefinition<any, any>;\n\nexport interface McpServerOptions {\n  name: string;\n  version: string;\n  description: string;\n  tools: McpToolDefinition[];\n}\n\n// Define the expected MCP content type structure\ntype McpContent =\n  | { type: 'text'; text: string } // Use 'text' property instead of 'data'\n  | { type: 'image'; data: string; mimeType: string }\n  | { type: 'audio'; data: string; mimeType: string };\n  // Add other MCP content types if needed, e.g., resource\n\n// Function to map Sylph Lab Part types to MCP content types\nfunction mapToMcpContent(parts: Part[]): McpContent[] {\n  // Use mapWhen and filter out undefined results\n  return mapWhen(parts, {\n    text: (part) => ({ type: 'text' as const, text: part.value }), // Use 'text' property\n    json: (part) => ({ type: 'text' as const, text: JSON.stringify(part.value, null, 2) }), // Stringify JSON for MCP text\n    image: (part) => ({ type: 'image' as const, data: part.data, mimeType: part.mimeType }), // Pass mimeType\n    audio: (part) => ({ type: 'audio' as const, data: part.data, mimeType: part.mimeType }), // Pass mimeType\n    fileRef: (part) => ({ type: 'text' as const, text: `File reference: ${part.path}` }), // Represent fileRef as text\n  });\n}\n\n// Updated registerTools function to accept ToolDefinition array\nexport function registerTools(\n  server: McpServer,\n  tools: McpToolDefinition[],\n  toolOptions: ToolExecuteOptions,\n): void {\n  for (const tool of tools) { // Use for...of loop as suggested by biome\n    const { name, description, inputSchema, execute } = tool;\n\n    // Wrap primitive schema in { value: schema } for MCP registration\n    const isObjectSchema = 'shape' in inputSchema;\n    const schemaDefinition = isObjectSchema\n      ? (inputSchema as ZodObject<ZodRawShape>).shape\n      : { value: inputSchema };\n\n    // Define the callback without the _extra parameter\n    const toolCallback = async (\n        mcpArgs: any // Use 'any' for now, or a more specific type if available from SDK\n    ): Promise<{ content: McpContent[]; isError?: boolean }> => { // Match expected return type\n      try {\n        const executionArgs = isObjectSchema ? mcpArgs : mcpArgs.value;\n        const executionContext = toolOptions;\n        const resultParts = await execute({ context: executionContext, args: executionArgs });\n        const mcpContent = mapToMcpContent(resultParts);\n        return { content: mcpContent, isError: false };\n      } catch (error: unknown) {\n        console.error(`Error executing tool ${name}:`, error);\n        const errorMessage = error instanceof Error ? error.message : String(error);\n        // Ensure error content matches McpContent type\n        return { content: [{ type: 'text', text: `Error: ${errorMessage}` }], isError: true }; // Use 'text' property\n      }\n    };\n\n    server.tool(name, description, schemaDefinition, toolCallback);\n  }\n}\n\n// Updated startMcpServer function\nexport async function startMcpServer(\n  serverOptions: McpServerOptions,\n  toolOptions: ToolExecuteOptions,\n): Promise<McpServer> {\n  // Dynamically import McpServer only when starting\n  const { McpServer: McpServerConstructor } = await import('@modelcontextprotocol/sdk/server/mcp.js');\n\n  const server = new McpServerConstructor({\n    name: serverOptions.name,\n    version: serverOptions.version,\n    description: serverOptions.description,\n  });\n\n  registerTools(server, serverOptions.tools, toolOptions);\n\n  const transport = new StdioServerTransport();\n  await server.connect(transport);\n  console.error(`[${serverOptions.name}] MCP server started on stdio.`); // Log to stderr\n\n  // Graceful shutdown handling within startMcpServer\n  const shutdown = async (signal: string) => {\n    console.error(`[${serverOptions.name}] Received ${signal}. Shutting down...`);\n    // Add any specific cleanup logic here if needed\n    // await server.disconnect(); // disconnect() method does not exist on McpServer\n    process.exit(0);\n  };\n\n  process.on('SIGINT', () => shutdown('SIGINT'));\n  process.on('SIGTERM', () => shutdown('SIGTERM'));\n\n  return server;\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,mBAAqC;AAErC,wBAMO;AAoBP,SAAS,gBAAgB,OAA6B;AAEpD,aAAO,2BAAQ,OAAO;AAAA,IACpB,MAAM,CAAC,UAAU,EAAE,MAAM,QAAiB,MAAM,KAAK,MAAM;AAAA;AAAA,IAC3D,MAAM,CAAC,UAAU,EAAE,MAAM,QAAiB,MAAM,KAAK,UAAU,KAAK,OAAO,MAAM,CAAC,EAAE;AAAA;AAAA,IACpF,OAAO,CAAC,UAAU,EAAE,MAAM,SAAkB,MAAM,KAAK,MAAM,UAAU,KAAK,SAAS;AAAA;AAAA,IACrF,OAAO,CAAC,UAAU,EAAE,MAAM,SAAkB,MAAM,KAAK,MAAM,UAAU,KAAK,SAAS;AAAA;AAAA,IACrF,SAAS,CAAC,UAAU,EAAE,MAAM,QAAiB,MAAM,mBAAmB,KAAK,IAAI,GAAG;AAAA;AAAA,EACpF,CAAC;AACH;AAGO,SAAS,cACd,QACA,OACA,aACM;AACN,aAAW,QAAQ,OAAO;AACxB,UAAM,EAAE,MAAM,aAAa,aAAa,QAAQ,IAAI;AAGpD,UAAM,iBAAiB,WAAW;AAClC,UAAM,mBAAmB,iBACpB,YAAuC,QACxC,EAAE,OAAO,YAAY;AAGzB,UAAM,eAAe,OACjB,YACwD;AAC1D,UAAI;AACF,cAAM,gBAAgB,iBAAiB,UAAU,QAAQ;AACzD,cAAM,mBAAmB;AACzB,cAAM,cAAc,MAAM,QAAQ,EAAE,SAAS,kBAAkB,MAAM,cAAc,CAAC;AACpF,cAAM,aAAa,gBAAgB,WAAW;AAC9C,eAAO,EAAE,SAAS,YAAY,SAAS,MAAM;AAAA,MAC/C,SAAS,OAAgB;AACvB,gBAAQ,MAAM,wBAAwB,IAAI,KAAK,KAAK;AACpD,cAAM,eAAe,iBAAiB,QAAQ,MAAM,UAAU,OAAO,KAAK;AAE1E,eAAO,EAAE,SAAS,CAAC,EAAE,MAAM,QAAQ,MAAM,UAAU,YAAY,GAAG,CAAC,GAAG,SAAS,KAAK;AAAA,MACtF;AAAA,IACF;AAEA,WAAO,KAAK,MAAM,aAAa,kBAAkB,YAAY;AAAA,EAC/D;AACF;AAGA,eAAsB,eACpB,eACA,aACoB;AAEpB,QAAM,EAAE,WAAW,qBAAqB,IAAI,MAAM,OAAO,yCAAyC;AAElG,QAAM,SAAS,IAAI,qBAAqB;AAAA,IACtC,MAAM,cAAc;AAAA,IACpB,SAAS,cAAc;AAAA,IACvB,aAAa,cAAc;AAAA,EAC7B,CAAC;AAED,gBAAc,QAAQ,cAAc,OAAO,WAAW;AAEtD,QAAM,YAAY,IAAI,kCAAqB;AAC3C,QAAM,OAAO,QAAQ,SAAS;AAC9B,UAAQ,MAAM,IAAI,cAAc,IAAI,gCAAgC;AAGpE,QAAM,WAAW,OAAO,WAAmB;AACzC,YAAQ,MAAM,IAAI,cAAc,IAAI,cAAc,MAAM,oBAAoB;AAG5E,YAAQ,KAAK,CAAC;AAAA,EAChB;AAEA,UAAQ,GAAG,UAAU,MAAM,SAAS,QAAQ,CAAC;AAC7C,UAAQ,GAAG,WAAW,MAAM,SAAS,SAAS,CAAC;AAE/C,SAAO;AACT;","names":[]}